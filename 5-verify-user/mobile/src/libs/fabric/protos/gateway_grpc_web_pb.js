/**
 * @fileoverview gRPC-Web generated client stub for gateway
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.2
// source: gateway.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var peer_chaincode_event_pb = require('./peer/chaincode_event_pb.js')

var peer_proposal_pb = require('./peer/proposal_pb.js')

var peer_proposal_response_pb = require('./peer/proposal_response_pb.js')

var peer_transaction_pb = require('./peer/transaction_pb.js')

var common_common_pb = require('./common/common_pb.js')

var orderer_ab_pb = require('./orderer/ab_pb.js')
const proto = {};
proto.gateway = require('../protos/gateway_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gateway.GatewayClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gateway.GatewayPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gateway.EndorseRequest,
 *   !proto.gateway.EndorseResponse>}
 */
const methodDescriptor_Gateway_Endorse = new grpc.web.MethodDescriptor(
  '/gateway.Gateway/Endorse',
  grpc.web.MethodType.UNARY,
  proto.gateway.EndorseRequest,
  proto.gateway.EndorseResponse,
  /**
   * @param {!proto.gateway.EndorseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gateway.EndorseResponse.deserializeBinary
);


/**
 * @param {!proto.gateway.EndorseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gateway.EndorseResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gateway.EndorseResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gateway.GatewayClient.prototype.endorse =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gateway.Gateway/Endorse',
      request,
      metadata || {},
      methodDescriptor_Gateway_Endorse,
      callback);
};


/**
 * @param {!proto.gateway.EndorseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gateway.EndorseResponse>}
 *     Promise that resolves to the response
 */
proto.gateway.GatewayPromiseClient.prototype.endorse =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gateway.Gateway/Endorse',
      request,
      metadata || {},
      methodDescriptor_Gateway_Endorse);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gateway.SubmitRequest,
 *   !proto.gateway.SubmitResponse>}
 */
const methodDescriptor_Gateway_Submit = new grpc.web.MethodDescriptor(
  '/gateway.Gateway/Submit',
  grpc.web.MethodType.UNARY,
  proto.gateway.SubmitRequest,
  proto.gateway.SubmitResponse,
  /**
   * @param {!proto.gateway.SubmitRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gateway.SubmitResponse.deserializeBinary
);


/**
 * @param {!proto.gateway.SubmitRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gateway.SubmitResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gateway.SubmitResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gateway.GatewayClient.prototype.submit =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gateway.Gateway/Submit',
      request,
      metadata || {},
      methodDescriptor_Gateway_Submit,
      callback);
};


/**
 * @param {!proto.gateway.SubmitRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gateway.SubmitResponse>}
 *     Promise that resolves to the response
 */
proto.gateway.GatewayPromiseClient.prototype.submit =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gateway.Gateway/Submit',
      request,
      metadata || {},
      methodDescriptor_Gateway_Submit);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gateway.SignedCommitStatusRequest,
 *   !proto.gateway.CommitStatusResponse>}
 */
const methodDescriptor_Gateway_CommitStatus = new grpc.web.MethodDescriptor(
  '/gateway.Gateway/CommitStatus',
  grpc.web.MethodType.UNARY,
  proto.gateway.SignedCommitStatusRequest,
  proto.gateway.CommitStatusResponse,
  /**
   * @param {!proto.gateway.SignedCommitStatusRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gateway.CommitStatusResponse.deserializeBinary
);


/**
 * @param {!proto.gateway.SignedCommitStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gateway.CommitStatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gateway.CommitStatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gateway.GatewayClient.prototype.commitStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gateway.Gateway/CommitStatus',
      request,
      metadata || {},
      methodDescriptor_Gateway_CommitStatus,
      callback);
};


/**
 * @param {!proto.gateway.SignedCommitStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gateway.CommitStatusResponse>}
 *     Promise that resolves to the response
 */
proto.gateway.GatewayPromiseClient.prototype.commitStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gateway.Gateway/CommitStatus',
      request,
      metadata || {},
      methodDescriptor_Gateway_CommitStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gateway.EvaluateRequest,
 *   !proto.gateway.EvaluateResponse>}
 */
const methodDescriptor_Gateway_Evaluate = new grpc.web.MethodDescriptor(
  '/gateway.Gateway/Evaluate',
  grpc.web.MethodType.UNARY,
  proto.gateway.EvaluateRequest,
  proto.gateway.EvaluateResponse,
  /**
   * @param {!proto.gateway.EvaluateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gateway.EvaluateResponse.deserializeBinary
);


/**
 * @param {!proto.gateway.EvaluateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gateway.EvaluateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gateway.EvaluateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gateway.GatewayClient.prototype.evaluate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gateway.Gateway/Evaluate',
      request,
      metadata || {},
      methodDescriptor_Gateway_Evaluate,
      callback);
};


/**
 * @param {!proto.gateway.EvaluateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gateway.EvaluateResponse>}
 *     Promise that resolves to the response
 */
proto.gateway.GatewayPromiseClient.prototype.evaluate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gateway.Gateway/Evaluate',
      request,
      metadata || {},
      methodDescriptor_Gateway_Evaluate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gateway.SignedChaincodeEventsRequest,
 *   !proto.gateway.ChaincodeEventsResponse>}
 */
const methodDescriptor_Gateway_ChaincodeEvents = new grpc.web.MethodDescriptor(
  '/gateway.Gateway/ChaincodeEvents',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.gateway.SignedChaincodeEventsRequest,
  proto.gateway.ChaincodeEventsResponse,
  /**
   * @param {!proto.gateway.SignedChaincodeEventsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gateway.ChaincodeEventsResponse.deserializeBinary
);


/**
 * @param {!proto.gateway.SignedChaincodeEventsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.gateway.ChaincodeEventsResponse>}
 *     The XHR Node Readable Stream
 */
proto.gateway.GatewayClient.prototype.chaincodeEvents =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/gateway.Gateway/ChaincodeEvents',
      request,
      metadata || {},
      methodDescriptor_Gateway_ChaincodeEvents);
};


/**
 * @param {!proto.gateway.SignedChaincodeEventsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.gateway.ChaincodeEventsResponse>}
 *     The XHR Node Readable Stream
 */
proto.gateway.GatewayPromiseClient.prototype.chaincodeEvents =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/gateway.Gateway/ChaincodeEvents',
      request,
      metadata || {},
      methodDescriptor_Gateway_ChaincodeEvents);
};


module.exports = proto.gateway;

